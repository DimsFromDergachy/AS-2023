@page "/vacancy/add/{StaffUnitId}"
@page "/vacancy/edit/{VacancyId:int}"
@using TeamGatherer.Shared.Requests
@using TeamGatherer.Shared.ServerAdapterViewModels
@using TeamGatherer.Shared.ViewModels
@using System.ComponentModel.DataAnnotations
@inject HttpClient Http
@inject NavigationManager NavigationManager

<h1>@Title вакансию</h1>
<hr/>
<EditForm Model="@Vacancy" OnValidSubmit="SaveVacancy">
    <DataAnnotationsValidator/>
    
    @if (_errorList.Any())
    {
        @foreach (var error in _errorList)
        {
            <p><em>Ошибка: @error</em></p>
        }
    }

    <div class="mb-3">
        <label for="Title" class="form-label">Заголовок</label>
        <div class="col">
            <InputText class="form-control" @bind-Value="Vacancy.Name"/>
        </div>
        <ValidationMessage For="@(() => Vacancy.Name)" />
    </div>

    <div class="mb-3">
        <div class="row justify-content-start">
            <div class="col">Должность</div>
            <div class="col">
                @Position?.Name
            </div>
        </div>
    </div>

    <div class="mb-3">
        <label for="Requrements" class="form-label">Требования к кандидату</label>
        <div class="col">
            <InputTextArea class="form-control" @bind-Value="Vacancy.Requrements" />
        </div>
        <ValidationMessage For="@(() => Vacancy.Requrements)" />
    </div>

    <div class="mb-3">
        <label for="Responsibilities" class="form-label">Обязанности</label>
        <div class="col">
            <InputTextArea class="form-control" @bind-Value="Vacancy.Responsibilities" />
        </div>
        <ValidationMessage For="@(() => Vacancy.Responsibilities)"/>
    </div>
    
    <div class="mb-3">
        <label for="WorkingConditions" class="form-label">Условия работы</label>
        <div class="col">
            <InputTextArea class="form-control" @bind-Value="Vacancy.WorkingConditions" />
        </div>
        <ValidationMessage For="@(() => Vacancy.WorkingConditions)" />
    </div>

    <div class="mb-3">
        <label for="HRs" class="form-label">Сотрудники кадровой службы, отвественные за вакансию:</label>
        <div class="col">
            <div class="row justify-content-start">
                @foreach (var item in Vacancy.Hrs)
                {
                    <div class="row justify-content-start">
                        <div class="col">@item.FirstName @item.LastName</div>
                        <div class="col">@item.Email</div>
                        <div class="col">
                            <button type="button" @onclick="() => { Vacancy.Hrs.Remove(item);UpdateHrList();}">-</button>
                        </div>
                    </div>
                }
                <br/>
                <div class="row justify-content-start">
                    <div class="col-md-8">
                        <select class="form-control selectpicker" @bind="SelectedHrId">
                            @foreach (var hr in HrsList)
                            {
                                <option value="@hr.Id">@hr.FirstName @hr.LastName</option>
                            }
                        </select>
                    </div>
                    <div class="col-sm">
                        <button type="button" @onclick="AddHr">Добавить сотрудника</button>
                    </div>
                </div>
            </div>
        </div>
        <ValidationMessage For="@(() => Vacancy.Hrs)" />
    </div>

    <div class="mb-3">
        <label for="HRs" class="form-label">Критерии оценки кандидатов</label>
        <div class="container">
            <div class="row justify-content-start">
                <div class="col-sm">Наименование навыка</div>
                <div class="col-sm">Вес навыка</div>
                <div class="col-sm"></div>
            </div>
            <div class="col-sm">
                @foreach (var item in Vacancy.Criteria)
                {
                    <div class="row justify-content-start">
                        <div class="col-sm">@item.Skill.Name</div>
                        <div class="col-sm">@item.Weight</div>
                        <div class="col-sm">
                            <button type="button" @onclick="() => { Vacancy.Criteria.Remove(item); UpdateSkillsList();}">-</button>
                        </div>
                    </div>
                }
            </div>
            <div class="row justify-content-start">
                <div class="col-sm">
                    <select class="form-control selectpicker" @bind="SelectedSkillId">
                        @foreach (var skill in Skills)
                        {
                            <option value="@skill.Id">@skill.Name</option>
                        }
                    </select>
                </div>
                <div class="col-sm"><InputNumber min="1" max="10" class="form-control" @bind-Value="SelectedWeight"/></div>
                <div class="col-sm">
                    <button type="button" @onclick="AddCriterion">Добавить критерий</button>
                </div>
            </div>
        </div>
        <ValidationMessage For="@(() => Vacancy.Criteria)"/>
    </div>

    <div class="form-group">
        <button type="submit" class="btn btn-primary">Сохранить</button>
        <button class="btn btn-light" @onclick="Cancel">Отмена</button>
    </div>
</EditForm>

@code {

    [Parameter]
    public int VacancyId { get; set; }

    [Parameter]
    public string StaffUnitId { get; set; }

    private readonly List<string> _errorList = new();    
    protected string Title = "Добавить";

    protected VacancyViewModel Vacancy = new()
    {
        Hrs = new List<EmployeeViewModel>(),
        Criteria = new List<CriteriaViewModel>()
    };

    [Required]
    protected int SelectedSkillId { get; set; }

    [Required]
    [Range(1, 10)]
    protected int SelectedWeight { get; set; }

    protected PositionViewModel Position { get; set; } = new();
    protected string SelectedHrId { get; set; } = string.Empty;

    protected List<SkillViewModel> Skills { get; set; } = new();
    
    protected List<EmployeeViewModel> HrsList { get; set; } = new();

    protected List<EmployeeViewModel> InitialHrs { get; set; } = new();
    protected List<CriteriaViewModel> InitialCriteriaVMs { get; set; } = new();

    protected StaffUnitAdapterViewModel StaffUnit { get; set; } = new();
    
    protected override async Task OnParametersSetAsync()
    {
        try
        {
            Skills = (await Http.GetFromJsonAsync<List<SkillViewModel>>("api/Skills/GetSkills"))
                ?.Where(it => it.IsDeleted == false).ToList()
                ?? new List<SkillViewModel>();
            
            HrsList = await Http.GetFromJsonAsync<List<EmployeeViewModel>>("api/Staff/GetHrs") ?? new List<EmployeeViewModel>();
            
            SelectedSkillId = Skills.FirstOrDefault()?.Id ?? 0;
            SelectedHrId = HrsList.FirstOrDefault()?.Id ?? string.Empty;
        }
        catch (Exception exception)
        {
            _errorList.Add(exception.Message);
        }

        if (VacancyId != 0)
        {
            Title = "Редактировать";
            Vacancy = await Http.GetFromJsonAsync<VacancyViewModel>($"api/Vacancy/GetVacancyById/{VacancyId}");

            StaffUnitId = Vacancy.StaffUnit.Id;
            InitialHrs = new List<EmployeeViewModel>(Vacancy.Hrs);
            InitialCriteriaVMs = new List<CriteriaViewModel>(Vacancy.Criteria);
        }

        StaffUnit = await Http.GetFromJsonAsync<StaffUnitAdapterViewModel>($"api/Staff/GetStaffUnitById/{StaffUnitId}");
        
        Position = await Http.GetFromJsonAsync<PositionViewModel>($"api/Staff/GetPositionById/{StaffUnit.PositionId}");

        UpdateHrList();
        UpdateSkillsList();
    }

    protected void AddHr()
    {
        if (string.IsNullOrWhiteSpace(SelectedHrId)) 
            return;

        var hr = HrsList.First(it => it.Id == SelectedHrId);
        Vacancy.Hrs.Add(hr);

        SelectedHrId = string.Empty;

        UpdateHrList();
    }

    private void UpdateHrList()
    {
        HrsList = HrsList.FindAll(it => !Vacancy.Hrs.Select(c => c.Id).ToList().Contains(it.Id));
    }

    private void UpdateSkillsList()
    {
        Skills = Skills.FindAll(it => !Vacancy.Criteria.Select(c => c.Skill.Id).ToList().Contains(it.Id.Value));
    }

    protected void AddCriterion()
    {
        if (SelectedSkillId == 0 || SelectedWeight == 0)
        {
            return;
        }

        var criterion = new CriteriaViewModel
        {
            Skill = Skills.First(it => it.Id == SelectedSkillId),
            Weight = SelectedWeight
        };

        Vacancy.Criteria.Add(criterion);

        UpdateSkillsList();
        SelectedSkillId = Skills.FirstOrDefault()?.Id ?? 0;
        SelectedHrId = HrsList.FirstOrDefault()?.Id ?? string.Empty;
    }

    protected async Task SaveVacancy()
    {
        if (Vacancy.Id != 0)
        {
            var hrs = Vacancy.Hrs;

            var positionId = StaffUnit.PositionId;

            var addedHrs = Vacancy.Hrs.FindAll(it => !InitialHrs.Contains(it));
            var removedHrs = InitialHrs.FindAll(it => !Vacancy.Hrs.Contains(it));

            var addedCriteria = Vacancy.Criteria.FindAll(it => !InitialCriteriaVMs.Contains(it));
            var removedCriteria = InitialCriteriaVMs.FindAll(it => !Vacancy.Criteria.Contains(it));
            

            var addCriteriaRequests = new List<CriteriaRequest>();

            foreach (var criteriaViewModel in addedCriteria)
            {
                var skill = criteriaViewModel.Skill;
                var criteriaRequest = new CriteriaRequest
                {
                    Skill = new SkillRequest { Id = skill.Id.Value, Name = skill.Name, IsDeleted = skill.IsDeleted, MaxScore = skill.MaxScore, SkillGroupId = skill.SkillGroupId },
                    Weight = criteriaViewModel.Weight
                };

                addCriteriaRequests.Add(criteriaRequest);
            }
            
            var addCriterionRequest = new AddCriteriaToVacancyRequest()
            {
                Criterias = addCriteriaRequests,
                VacancyId = VacancyId
            };

            var removeCriteriaRequest = new RemoveCriteriaFromVacancyRequest()
            {
                CriteriaIds = removedCriteria.Select(it => it.Id).ToList(),
                VacancyId = VacancyId
            };

            var addHrRequest = new AddHrToVacancyRequest()
                {
                    HrIds = addedHrs.Select(it => it.Id).ToList(),
                    VacancyId = VacancyId
                };
            var removeHrRequest = new RemoveHrFromVacancyRequest()
                {
                    HrIds = removedHrs.Select(it => it.Id).ToList(),
                    VacancyId = VacancyId
                };

            var request = new UpdateVacancyRequest
            {
                Name = Vacancy.Name, 
                PositionId = positionId,
                Requrements = Vacancy.Requrements,
                Responsibilities = Vacancy.Responsibilities,
                WorkingConditions = Vacancy.WorkingConditions
            };

            await Http.PostAsJsonAsync("api/Vacancy/AddCriteriaToVacancy", addCriterionRequest);
            await Http.PostAsJsonAsync("api/Vacancy/RemoveCriteriaFromVacancy", removeCriteriaRequest);
            await Http.PostAsJsonAsync("api/Vacancy/AddHrToVacancy", addHrRequest);
            await Http.PostAsJsonAsync("api/Vacancy/RemoveHrFromVacancy", removeHrRequest);

            await Http.PostAsJsonAsync("api/Vacancy/UpdateVacancy", request);
        }
        else
        {
            var criteriaRequests = new List<CriteriaRequest>();

            foreach (var criteriaViewModel in Vacancy.Criteria)
            {
                var skill = criteriaViewModel.Skill;
                var criteriaRequest = new CriteriaRequest
                    {
                        Skill = new SkillRequest { Id = skill.Id.Value, Name = skill.Name, IsDeleted = skill.IsDeleted, MaxScore = skill.MaxScore, SkillGroupId = skill.SkillGroupId },
                        Weight = criteriaViewModel.Weight
                    };

                criteriaRequests.Add(criteriaRequest);
            }

            var hrs = Vacancy.Hrs.Select(it => it.Id).ToList();

            var positionId = StaffUnit.PositionId;



            var request = new CreateVacancyRequest
            {
                Name = Vacancy.Name, 
                PositionId = positionId,
                Criterias = criteriaRequests,
                HRs = hrs,
                Requrements = Vacancy.Requrements,
                Responsibilities = Vacancy.Responsibilities,
                StateUnitId = StaffUnitId,
                WorkingConditions = Vacancy.WorkingConditions
            };

            await Http.PostAsJsonAsync("api/Vacancy/CreateVacancy", request);
        }
        Cancel();
    }

    public void Cancel()
    {
        NavigationManager.NavigateTo("/vacanies");
    }

}