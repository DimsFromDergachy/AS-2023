@page "/staffunits"
@using TeamGatherer.Shared.DTOs
@using TeamGatherer.Shared.ViewModels
@inject HttpClient Http
@inject NavigationManager NavigationManager

<PageTitle>Свободные штатные единицы</PageTitle>

<h1>Свободные штатные единицы</h1>

@if (_errorList.Any())
{
    @foreach (var error in _errorList)
    {
        <p><em>Ошибка: @error</em></p>
    }
}

<table>
    <tr>
        <th>Наименование позиции</th>
        <th>Статус</th>
        <th></th>

    </tr>
    @foreach (var staffUnitDto in StaffUnitList)
    {
        <tr>
            <td>@staffUnitDto.Position.Name</td>
            <td>@staffUnitDto.Status</td>
            <td><button type="button" @onclick="() => {AddVacancy(staffUnitDto.Id); }">Добавить/посмотреть вакансию</button></td>
        </tr>
    }
</table>

@code {
    private readonly List<string> _errorList = new();

    protected List<StaffUnitDto> StaffUnitList { get; set; } = new();
    
    protected override async Task OnInitializedAsync()
    {
        try
        {
            StaffUnitList = await Http.GetFromJsonAsync<List<StaffUnitDto>>("api/Staff/GetOpenStaffUnits") ?? new List<StaffUnitDto>();
        }
        catch (Exception exception)
        {
            _errorList.Add(exception.Message);
        }
    }

    public async Task AddVacancy(string id)
    {
        var vacancyId = await Http.GetFromJsonAsync<int>($"api/Vacancy/GetVacancyByStaffId/{id}");

        NavigationManager.NavigateTo(vacancyId == 0 ? $"/vacancy/add/{id}" : $"/vacancy/details/{vacancyId}");
    }
}